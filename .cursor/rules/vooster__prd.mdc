---
description:
globs:
alwaysApply: true
---
# 통합형 실시간 다국어 음성 번역 시스템 PRD (멀티 API 지원)

## 1. 프로젝트 개요

- **프로젝트 명**: 통합형 실시간 음성 통역 시스템
- **목표**: 사용자의 한국어 음성을 실시간으로 인식하고, 선택한 다국어로 자연스럽게 번역된 음성을 출력하는 초저지연 시스템을 구축하며, 다양한 음성 API(STT, 번역, TTS)를 손쉽게 교체하거나 조합할 수 있도록 설계한다.
- **핵심 기술 스택**: Next.js, TypeScript, Web Audio API, WebSocket, 모듈화된 API Adapter 구조 (GPT-4o, Soniox, Google Gemini 등)

## 2. 핵심 기능 (Features)

- **모듈형 음성 입출력 처리**:

  - 다양한 STT, 번역, TTS API를 플러그인 형태로 연동 가능
  - 기본값으로 GPT-4o Realtime 사용 (STT + 번역 + TTS 통합)
  - 필요 시 Soniox STT, Google Translate, Google TTS, Gemini TTS 등으로 교체 가능

- **실시간 음성 스트리밍**:

  - 브라우저 마이크 캡처 및 WebRTC/WebSocket을 통한 오디오 스트림 처리
  - 음성 입력과 동시에 실시간 응답 재생 가능

- **다국어 순차 출력 시스템**:

  - 다중 언어 선택 및 순서 설정 (드래그앤드롭 지원)
  - 각 언어별 개별 ON/OFF 토글 제어
  - 선택된 언어들의 순차적 음성 재생
  - 언어별 우선순위 및 재생 순서 관리

- **언어 설정 및 API 선택**:

  - 출력 언어 다중 선택 (체크박스 + 순서 조정)
  - API 공급자별 설정 (예: GPT-4o, Soniox + Gemini, Google TTS 등)
  - 언어별 음성 품질 및 속도 개별 설정

- **UI 기능**:

  - 마이크 on/off, 볼륨 제어
  - 실시간 텍스트 로그 출력 (원문 + 번역문)
  - 설정 저장 및 API 키 입력 관리

## 3. IA (페이지 구조도)

- **메인 페이지 (**``**)**:

  - 실시간 통역 인터페이스 (마이크, 언어 선택, 음성 로그)

- **설정 페이지 (**``**)**:

  - API 설정 (STT, 번역, TTS 선택)
  - 출력 언어 및 음성 품질 설정
  - API 키 관리 및 장치 선택

## 4. 도메인 설계

`src/domains/` 기준으로 구성

- `speech`: 마이크 캡처 및 오디오 스트리밍 로직
- `translation`: 다국어 번역 처리 및 언어별 결과 관리
- `tts`: 음성 합성 및 다중 언어 음성 생성
- `pipeline`: STT → 번역 → TTS 파이프라인 구성 및 전환 처리
- `queue`: 다국어 음성 큐 관리 및 순차 재생 제어
- `api`: 공급자별 어댑터 모듈 (`gpt4o.ts`, `soniox.ts`, `gemini.ts`, `google.ts`)
- `settings`: 사용자 설정, API 키, 언어 저장 및 우선순위 관리
- `ui`: 프론트엔드 마이크, 언어 선택, 텍스트 출력 컴포넌트

## 5. 주요 로직 (수도코드)

```pseudocode
// 다국어 순차 출력 메인 로직
function startMultiLanguageTranslationPipeline(enabledLanguages, providerConfig) {
  mic = await startMicrophoneCapture()
  audioQueue = new AudioQueue()

  if (providerConfig.name == 'gpt4o') {
    // GPT-4o는 단일 언어만 지원하므로 첫 번째 언어 사용
    primaryLanguage = enabledLanguages[0]
    socket = connectGPT4o(primaryLanguage.code)
    mic.onData(chunk => socket.send(chunk))
    socket.onMessage(audio => playAudio(audio))
  } else {
    sttStream = streamToSTT(providerConfig.stt)
    sttStream.onText(koreanText => {
      processMultiLanguageOutput(koreanText, enabledLanguages, providerConfig)
    })
  }
}

// 다국어 번역 및 순차 재생
function processMultiLanguageOutput(koreanText, enabledLanguages, providerConfig) {
  audioQueue.clear()
  
  for (language of enabledLanguages) {
    if (language.isEnabled) {
      translatedText = translateText(koreanText, language.code, providerConfig.translation)
      audioData = synthesizeSpeech(translatedText, language.voice, providerConfig.tts)
      audioQueue.enqueue({
        language: language.code,
        audio: audioData,
        text: translatedText,
        priority: language.priority
      })
    }
  }
  
  audioQueue.playSequentially()
}

// 순차 재생 큐 관리
class AudioQueue {
  constructor() {
    this.queue = []
    this.isPlaying = false
  }
  
  enqueue(audioItem) {
    this.queue.push(audioItem)
    this.queue.sort((a, b) => a.priority - b.priority)
  }
  
  playSequentially() {
    if (this.isPlaying || this.queue.length === 0) return
    
    this.isPlaying = true
    this.playNext()
  }
  
  playNext() {
    if (this.queue.length === 0) {
      this.isPlaying = false
      return
    }
    
    currentAudio = this.queue.shift()
    displayTranslation(currentAudio.language, currentAudio.text)
    
    audioPlayer.play(currentAudio.audio)
    audioPlayer.onEnded(() => this.playNext())
  }
}
```

## 6. API 사용 방식 요약

### 🔹 GPT-4o Realtime API (통합형 STT+번역+TTS)

- **사용 방식**: WebSocket 기반 실시간 세션 생성 후 오디오 스트리밍 전송
- **설정 지침 (**``**)** 예시:

```json
{
  "type": "response.create",
  "response": {
    "modalities": ["audio"],
    "instructions": "Translate from Korean to Japanese and respond only in Japanese speech."
  }
}
```

- **특징**: 단일 세션에서 입력된 음성을 분석, 번역, 음성 출력까지 수행 (초저지연, 자연스러운 억양 유지)

### 🔹 Soniox STT API

- **사용 방식**: WebSocket 기반 오디오 스트림 입력 후 텍스트 응답 수신
- **URL**: `wss://api.soniox.com/v1/stt/streaming`
- **요청 예시**:

```json
{
  "access_key": "<SONIOX_API_KEY>",
  "language": "ko-KR",
  "audio_format": "pcm_s16le",
  "sample_rate": 16000
}
```

- **특징**: 정확한 STT 결과 제공, STT 전용 고정밀 API

### 🔹 Google Translate API

- **사용 방식**: HTTP POST 요청으로 텍스트 번역
- **Endpoint**: `https://translation.googleapis.com/language/translate/v2`
- **요청 예시**:

```json
{
  "q": "안녕하세요",
  "source": "ko",
  "target": "en",
  "format": "text"
}
```

- **특징**: 빠르고 품질 높은 번역, 언어 지원 폭넓음

### 🔹 Google TTS API

- **사용 방식**: HTTP POST 요청으로 텍스트 → 음성 생성
- **Endpoint**: `https://texttospeech.googleapis.com/v1/text:synthesize`
- **요청 예시**:

```json
{
  "input": { "text": "Hello" },
  "voice": { "languageCode": "en-US", "name": "en-US-Wavenet-D" },
  "audioConfig": { "audioEncoding": "MP3" }
}
```

- **특징**: WaveNet 기반 자연스러운 발음, 속도 및 음성 제어 가능

### 🔹 Gemini Pro API (TTS / 번역 가능)

- **사용 방식**: Google AI Studio 또는 Vertex AI 기반 LLM 호출
- **번역 예시 프롬프트**: `Translate "안녕하세요" into English.`
- **TTS 미리보기**: `tts.speak(text, voiceParams)` 등 사용자 정의 API 필요

## 7. 유저 플로우 (Mermaid)

```mermaid
graph TD
    A[앱 시작] --> B[마이크 권한 요청]
    B --> C[언어 설정 페이지]
    C --> D[출력 언어 다중 선택]
    D --> E[언어별 ON/OFF 토글 설정]
    E --> F[언어 우선순위 드래그앤드롭 조정]
    F --> G[API 설정 확인]
    G --> H[메인 통역 화면]
    H --> I[마이크 활성화]
    I --> J[한국어 음성 입력]
    J --> K[실시간 STT 처리]
    K --> L[활성화된 모든 언어로 동시 번역]
    L --> M[언어별 TTS 생성 및 큐 추가]
    M --> N[첫 번째 우선순위 언어 재생]
    N --> O{다음 언어가 있는가?}
    O -->|Yes| P[다음 우선순위 언어 재생]
    P --> O
    O -->|No| Q[모든 언어 재생 완료]
    Q --> R{계속 말하는가?}
    R -->|Yes| J
    R -->|No| S[대기 상태]
    S --> T{설정 변경?}
    T -->|Yes| C
    T -->|No| I
    
    subgraph "실시간 UI 업데이트"
        U[원문 텍스트 표시]
        V[현재 재생 중인 언어 하이라이트]
        W[번역문 텍스트 표시]
        X[재생 진행률 표시]
    end
    
    K --> U
    L --> W
    N --> V
    P --> V
    N --> X
    P --> X
```

## 8. 시스템 설계 (System Design)

```mermaid
graph TB
  subgraph Client (Browser)
    A[MicCapture.ts] --> B[PipelineManager.ts]
    B --> C[AudioPlayer.ts]
    B --> D[ApiAdapter.ts]
    D --> E[GPT4oAdapter | SonioxAdapter | GeminiAdapter | GoogleAdapter]
  end

  subgraph Settings
    F[localStorage] --> G[SettingsService.ts]
    G --> D
  end

  A --> B
  C --> Speaker
```

## 9. 데이터 구조 (로컬 저장)

```json
{
  "userSettings": {
    "enabledLanguages": [
      {
        "code": "en",
        "name": "English",
        "isEnabled": true,
        "priority": 1,
        "voice": {
          "provider": "google",
          "name": "en-US-Wavenet-D",
          "speed": 1.0,
          "pitch": 0.0
        }
      },
      {
        "code": "ja",
        "name": "Japanese",
        "isEnabled": true,
        "priority": 2,
        "voice": {
          "provider": "google",
          "name": "ja-JP-Wavenet-A",
          "speed": 1.0,
          "pitch": 0.0
        }
      },
      {
        "code": "zh",
        "name": "Chinese",
        "isEnabled": false,
        "priority": 3,
        "voice": {
          "provider": "google",
          "name": "cmn-CN-Wavenet-A",
          "speed": 1.0,
          "pitch": 0.0
        }
      }
    ],
    "outputVolume": 0.9,
    "playbackMode": "sequential", // "sequential" | "simultaneous"
    "interLanguageDelay": 500, // ms between language playbacks
    "selectedPipeline": {
      "stt": "soniox",
      "translation": "gemini",
      "tts": "google"
    },
    "apiKeys": {
      "openai": "sk-...",
      "soniox": "sx-...",
      "google": "AIza...",
      "gemini": "AIza..."
    },
    "uiPreferences": {
      "showOriginalText": true,
      "showTranslatedText": true,
      "highlightCurrentLanguage": true,
      "showProgressIndicator": true
    }
  }
}
```

## 10. 추가 고려사항

### 🎯 **성능 최적화**
- 다중 언어 동시 번역 시 API 호출 병렬 처리
- 음성 큐 메모리 관리 및 가비지 컬렉션
- 네트워크 지연 시 fallback 메커니즘

### 🔧 **에러 처리**
- 특정 언어 번역 실패 시 다른 언어는 계속 진행
- API 호출 실패 시 재시도 로직
- 네트워크 연결 끊김 시 로컬 캐시 활용

### 👥 **사용자 경험**
- 각 언어별 재생 상태 시각적 표시
- 실시간 번역 진행률 인디케이터
- 언어 순서 변경 시 즉시 미리보기
- 키보드 단축키 지원 (스페이스바: 마이크 토글 등)

### ♿ **접근성**
- 시각 장애인을 위한 스크린 리더 지원
- 청각 장애인을 위한 텍스트 크기 조절
- 음성 속도 및 볼륨 세밀 조정
- 고대비 모드 및 다크 테마 지원

### 🔒 **보안 및 프라이버시**
- API 키 암호화 저장
- 음성 데이터 로컬 처리 옵션
- 사용자 데이터 자동 삭제 설정

## 11. 결론

본 시스템은 다양한 음성/번역 API를 자유롭게 조합하여 사용할 수 있는 유연한 구조로 설계되어 있으며, 다국어 순차 출력 기능을 통해 실용적인 실시간 통역 경험을 제공한다. 초기에는 GPT-4o Realtime API를 기본 제공하되, Soniox + Gemini + Google 조합으로 쉽게 전환 가능하며, 사용자의 언어 선택과 우선순위에 따른 맞춤형 통역 서비스를 구현한다. 장기적으로 Whisper, Azure Speech, Amazon Polly 등 다른 API 모델들도 플러그인 형태로 확장할 수 있다.


